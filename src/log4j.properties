 ### 设置###
#log4j.rootLogger = debug,console,ERROR,WARN,INFO,DEBUG,DBLog
 ### 设置###
log4j.rootLogger = debug,stdout,DBLogDefault
 
### 输出信息到控制台 ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} %n[METHOD]:%l%n[MESSAGE]:%m%n

### 写入数据库-系统级日志信息 ###
#使用自定义DATABASE appender,解决数据库超时断开数据无法写入的问题
log4j.appender.DBLogDefault=com.qut.util.Log4jJDBCAppender
log4j.appender.DBLogDefault.driver=com.mysql.jdbc.Driver
log4j.appender.DBLogDefault.URL=jdbc:mysql://localhost:3306/proj_hospitalizationmansys_ssm?useUnicode=true&characterEncoding=UTF-8
log4j.appender.DBLogDefault.user=root
log4j.appender.DBLogDefault.password=admin
log4j.appender.DBLogDefault.sql=insert into log (create_time,type,detial) VALUES ('%d{yyyy-MM-dd HH:mm:ss.SSS}','%p','[METHOD]:%l%n[MESSAGE]:%m%n')
log4j.appender.DBLogDefault.layout = org.apache.log4j.PatternLayout

### 写入数据库-自定义日志信息 ###
#以下配置无用
#使用自定义DATABASE appender,解决数据库超时断开数据无法写入的问题
#log4j.logger.com.qut.util.Log4jLogsDetial=ALL,DBLog
#log4j.additivity.test = false
#log4j.appender.DBLog=com.qut.util.Log4jJDBCAppender
#log4j.appender.DBLog.driver=com.mysql.jdbc.Driver
#log4j.appender.DBLog.URL=jdbc:mysql://localhost:3306/proj_hospitalizationmansys_ssm?useUnicode=true&characterEncoding=UTF-8
#log4j.appender.DBLog.user=root
#log4j.appender.DBLog.password=admin
#log4j.appender.DBLog.sql=insert into log (create_time,type,detial) VALUES ('%d{yyyy-MM-dd HH:mm:ss.SSS}','%p','[METHOD]:%l%n[MESSAGE]:%m%n')
#log4j.appender.DBLog.layout = org.apache.log4j.PatternLayout

### 输出ERROR 级别以上的日志到ERROR.log,且每天创建一个新文件 ###
#log4j.appender.ERROR = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.ERROR.File = D://LOGS/ERROR/ERROR.LOG
#log4j.appender.ERROR.DatePattern=yyyy-MM-dd'.LOG'
#log4j.appender.ERROR.Append = true
#log4j.appender.ERROR.Threshold = ERROR 
#log4j.appender.ERROR.layout = org.apache.log4j.PatternLayout
#log4j.appender.ERROR.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 输出WARN 级别以上的日志到WARN.log,且每天创建一个新文件 ###
#log4j.appender.WARN = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.WARN.File = D://LOGS/WARN/WARN.LOG
#log4j.appender.WARN.DatePattern=yyyy-MM-dd'.LOG'
#log4j.appender.WARN.Append = true
#log4j.appender.WARN.Threshold = WARN 
#log4j.appender.WARN.layout = org.apache.log4j.PatternLayout
#log4j.appender.WARN.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 输出INFO 级别以上的日志到INFO.log,且每天创建一个新文件 ###
#log4j.appender.INFO = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.INFO.File = D://LOGS/INFO/INFO.LOG
#log4j.appender.INFO.DatePattern=yyyy-MM-dd'.LOG'
#log4j.appender.INFO.Append = true
#log4j.appender.INFO.Threshold = INFO 
#log4j.appender.INFO.layout = org.apache.log4j.PatternLayout
#log4j.appender.INFO.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n

### 输出DEBUG 级别以上的日志到DEBUG.log,且每天创建一个新文件 ###
#log4j.appender.DEBUG = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.DEBUG.File = D://LOGS/DEBUG/DEBUG.LOG
#log4j.appender.DEBUG.DatePattern=yyyy-MM-dd'.LOG'
#log4j.appender.DEBUG.Append = true
#log4j.appender.DEBUG.Threshold = DEBUG 
#log4j.appender.DEBUG.layout = org.apache.log4j.PatternLayout
#log4j.appender.DEBUG.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n